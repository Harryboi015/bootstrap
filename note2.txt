HP@MERE MINGW64 /c/Exercise
$  git config --global user.name "Harryboi015"

HP@MERE MINGW64 /c/Exercise
$  git config --global user.email "chibuikemerenini"

HP@MERE MINGW64 /c/Exercise
$  git config --list
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
core.editor="C:\\Program Files\\Microsoft VS Code\\Code.exe" --wait
pull.rebase=false
credential.helper=manager-core
credential.https://dev.azure.com.usehttppath=true
init.defaultbranch=master
user.name=Harryboi015
user.email=chibuikemerenini

HP@MERE MINGW64 /c/Exercise
$ git init
Initialized empty Git repository in C:/Exercise/.git/

HP@MERE MINGW64 /c/Exercise (master)
$ git config --global init.defaultBranch main

HP@MERE MINGW64 /c/Exercise (master)
$ git branch -M main

HP@MERE MINGW64 /c/Exercise (main)
$ git config --list
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
core.editor="C:\\Program Files\\Microsoft VS Code\\Code.exe" --wait
pull.rebase=false
credential.helper=manager-core
credential.https://dev.azure.com.usehttppath=true
init.defaultbranch=master
user.name=Harryboi015
user.email=chibuikemerenini
init.defaultbranch=main
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.symlinks=false
core.ignorecase=true

HP@MERE MINGW64 /c/Exercise (main)
$ ls
Dapo/

HP@MERE MINGW64 /c/Exercise (main)
$ cd dapo

HP@MERE MINGW64 /c/Exercise/dapo (main)
$ ls
Exercise.txt  Harrison/  harrison.html

HP@MERE MINGW64 /c/Exercise/dapo (main)
$ git add harrison.html

HP@MERE MINGW64 /c/Exercise/dapo (main)
$ git status
On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   harrison.html

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        Exercise.txt


HP@MERE MINGW64 /c/Exercise/dapo (main)
$ git add .

HP@MERE MINGW64 /c/Exercise/dapo (main)
$ git status
On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   Exercise.txt
        new file:   harrison.html


HP@MERE MINGW64 /c/Exercise/dapo (main)
$ git --help
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone             Clone a repository into a new directory
   init              Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add               Add file contents to the index
   mv                Move or rename a file, a directory, or a symlink
   restore           Restore working tree files
   rm                Remove files from the working tree and from the index
   sparse-checkout   Initialize and modify the sparse-checkout

examine the history and state (see also: git help revisions)
   bisect            Use binary search to find the commit that introduced a bug
   diff              Show changes between commits, commit and working tree, etc
   grep              Print lines matching a pattern
   log               Show commit logs
   show              Show various types of objects
   status            Show the working tree status

grow, mark and tweak your common history
   branch            List, create, or delete branches
   commit            Record changes to the repository
   merge             Join two or more development histories together
   rebase            Reapply commits on top of another base tip
   reset             Reset current HEAD to the specified state
   switch            Switch branches
   tag               Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch             Download objects and refs from another repository
   pull              Fetch from and integrate with another repository or a local branch
   push              Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

HP@MERE MINGW64 /c/Exercise/dapo (main)
$  git commit -m "my first push"
[main (root-commit) 8263c74] my first push
 2 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 Dapo/Exercise.txt
 create mode 100644 Dapo/harrison.html

HP@MERE MINGW64 /c/Exercise/dapo (main)
$  git log
commit 8263c743a88a82f860461b1e4cdbfd219867f619 (HEAD -> main)
Author: Harryboi015 <chibuikemerenini>
Date:   Wed Oct 11 03:10:06 2023 -0700

    my first push

HP@MERE MINGW64 /c/Exercise/dapo (main)
$ git remote add origin https://github.com/Harryboi015/Exercise.git

HP@MERE MINGW64 /c/Exercise/dapo (main)
$ git push origin master
error: src refspec master does not match any
error: failed to push some refs to 'https://github.com/Harryboi015/Exercise.git'

HP@MERE MINGW64 /c/Exercise/dapo (main)
$ mkdir .gitignore

HP@MERE MINGW64 /c/Exercise/dapo (main)
$ mv dapo/ .gitignore
mv: cannot stat 'dapo/': No such file or directory

HP@MERE MINGW64 /c/Exercise/dapo (main)
$ ls
Exercise.txt  Harrison/  harrison.html

HP@MERE MINGW64 /c/Exercise/dapo (main)
$ cd ..

HP@MERE MINGW64 /c/Exercise (main)
$ mv dapo/ .gitignore/

HP@MERE MINGW64 /c/Exercise (main)
$ ls

HP@MERE MINGW64 /c/Exercise (main)
$ cd dapo
bash: cd: dapo: No such file or directory

HP@MERE MINGW64 /c/Exercise (main)
$ cd gitignore
bash: cd: gitignore: No such file or directory

HP@MERE MINGW64 /c/Exercise (main)
$ rm harrison.html
rm: cannot remove 'harrison.html': No such file or directory

HP@MERE MINGW64 /c/Exercise (main)
$ cd gitignore
bash: cd: gitignore: No such file or directory

HP@MERE MINGW64 /c/Exercise (main)
$ rmdir dapo
rmdir: failed to remove 'dapo': No such file or directory

HP@MERE MINGW64 /c/Exercise (main)
$ ls

HP@MERE MINGW64 /c/Exercise (main)
$ mkdir dapo

HP@MERE MINGW64 /c/Exercise (main)
$ ls
dapo/

HP@MERE MINGW64 /c/Exercise (main)
$ git push origin master
error: src refspec master does not match any
error: failed to push some refs to 'https://github.com/Harryboi015/Exercise.git'

HP@MERE MINGW64 /c/Exercise (main)
$ git push origin main
remote: Permission to Harryboi015/Exercise.git denied to Harryboi015.
fatal: unable to access 'https://github.com/Harryboi015/Exercise.git/': The requested URL returned error: 403

HP@MERE MINGW64 /c/Exercise (main)
$ git push origin main
info: please complete authentication in your browser...
Enumerating objects: 4, done.
Counting objects: 100% (4/4), done.
Delta compression using up to 4 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (4/4), 270 bytes | 270.00 KiB/s, done.
Total 4 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/Harryboi015/Exercise.git
 * [new branch]      main -> main

HP@MERE MINGW64 /c/Exercise (main)
$
